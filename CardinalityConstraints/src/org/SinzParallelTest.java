package org;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.microsoft.z3.Context;
import com.microsoft.z3.Solver;
import com.microsoft.z3.Status;
import com.microsoft.z3.Z3Exception;


public class SinzParallelTest {
  @Test
  public void testNumClausesVariables() throws Z3Exception {
    Context ctx = new Context();
    Solver solver = TestUtils.makeEncoding(2, 1, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 4);
    assertEquals(TestUtils.numVars(solver), 4);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 8);
    assertEquals(TestUtils.numVars(solver), 5);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 15);
    assertEquals(TestUtils.numVars(solver), 10);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 19);
    assertEquals(TestUtils.numVars(solver), 11);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 8);
    assertEquals(TestUtils.numVars(solver), 5);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 15);
    assertEquals(TestUtils.numVars(solver), 10);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 19);
    assertEquals(TestUtils.numVars(solver), 11);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 14);
    assertEquals(TestUtils.numVars(solver), 10);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    assertEquals(solver.getNumAssertions(), 18);
    assertEquals(TestUtils.numVars(solver), 11);
  }

  @Test
  public void testVariables() throws Z3Exception {
    Context ctx = new Context();
    // n=2 r=1
    Solver solver = TestUtils.makeEncoding(2, 1, new SinzParallel(), ctx);
    // x_1 = true
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(2, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(2, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(2, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    // n = 3 r = 1
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    // n = 4 r = 1
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    // n = 5 r = 1
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);

    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);

    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);

    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 1, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);

    // n = 3 r = 2
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(3, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    // n = 4 r = 2
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    // n = 5 r = 2
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);

    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);

    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);

    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 2, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);

    // n = 4 r = 3
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(4, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    // n = 5 r = 3
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);

    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);

    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.SATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.SATISFIABLE);

    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_5")));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_1")));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_2")));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_3")));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkNot(ctx.mkBoolConst("x_4")));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);
    solver = TestUtils.makeEncoding(5, 3, new SinzParallel(), ctx);
    solver.add(ctx.mkBoolConst("x_1"));
    solver.add(ctx.mkBoolConst("x_2"));
    solver.add(ctx.mkBoolConst("x_3"));
    solver.add(ctx.mkBoolConst("x_4"));
    solver.add(ctx.mkBoolConst("x_5"));
    assertEquals(solver.check(), Status.UNSATISFIABLE);

  }

}
